#!/usr/bin/env php
<?php

$BASEDIR = realpath(__DIR__ . '/../../../../');
if (!$BASEDIR || !file_exists("$BASEDIR/vendor/autoload.php")) {
    echo("failed to detect basedir.\n");
    exit(1);
}

$composer = json_decode(file_get_contents("$BASEDIR/composer.json"), true);
$psr4 = (array) ($composer['autoload']['psr-4'] ?? []);
$psr0 = (array) ($composer['autoload']['psr-0'] ?? []);
$srcfiles = (array) ($composer['autoload']['files'] ?? []);
$devfiles = (array) ($composer['autoload-dev']['files'] ?? []);

$psrdirs = [];
foreach ($psr4 as $namespace => $directory) {
    $psrdirs[$namespace] = "$BASEDIR/$directory";
}
foreach ($psr0 as $namespace => $directory) {
    $psrdirs[$namespace] = "$BASEDIR/$directory/" . strtr($namespace, ['\\' => DIRECTORY_SEPARATOR]);
}
unset($psrdirs[''], $psrdirs['\\']);
$namespace = array_key_first($psrdirs);
if (!$namespace) {
    echo("failed to detect namespace.\n");
    exit(2);
}

$find = function ($files) use ($BASEDIR) {
    foreach ($files as $file) {
        $fullpath = "$BASEDIR/$file";
        if (!file_exists($fullpath) || filesize($fullpath) === 0) {
            return $fullpath;
        }
        if (strpos(file_get_contents($fullpath, false, null, 0, 256), "# Don't touch this code. This is auto generated.") !== false) {
            return $fullpath;
        }
    }
    return null;
};
$srcfile = $find($srcfiles);
$devfile = $find($devfiles);

if ($srcfile) {
    file_put_contents($srcfile, '');
}
if ($devfile) {
    file_put_contents($devfile, '');
}

require_once "$BASEDIR/vendor/autoload.php";

if ($srcfile) {
    echo("$srcfile was written.\n");
    file_put_contents($srcfile, \ryunosuke\Functions\Transporter::exportNamespace($namespace, array_merge([dirname($srcfile)], $psrdirs)));
}
if ($devfile) {
    echo("$devfile was written.\n");
    file_put_contents($devfile, \ryunosuke\Functions\Transporter::exportNamespace($namespace));
}
