<?php

# Don't touch this code. This is auto generated.

namespace ryunosuke\Functions\Package;

# constants
/** SQL キーワード（全 RDBMS ごちゃまぜ） */
const KEYWORDS = [
    ""  => "",
    0   => "ACCESSIBLE",
    1   => "ACTION",
    2   => "ADD",
    3   => "AFTER",
    4   => "AGAINST",
    5   => "AGGREGATE",
    6   => "ALGORITHM",
    7   => "ALL",
    8   => "ALTER",
    9   => "ALTER TABLE",
    10  => "ANALYSE",
    11  => "ANALYZE",
    12  => "AND",
    13  => "AS",
    14  => "ASC",
    15  => "AUTOCOMMIT",
    16  => "AUTO_INCREMENT",
    17  => "BACKUP",
    18  => "BEGIN",
    19  => "BETWEEN",
    20  => "BINLOG",
    21  => "BOTH",
    22  => "CASCADE",
    23  => "CASE",
    24  => "CHANGE",
    25  => "CHANGED",
    26  => "CHARACTER SET",
    27  => "CHARSET",
    28  => "CHECK",
    29  => "CHECKSUM",
    30  => "COLLATE",
    31  => "COLLATION",
    32  => "COLUMN",
    33  => "COLUMNS",
    34  => "COMMENT",
    35  => "COMMIT",
    36  => "COMMITTED",
    37  => "COMPRESSED",
    38  => "CONCURRENT",
    39  => "CONSTRAINT",
    40  => "CONTAINS",
    41  => "CONVERT",
    42  => "CREATE",
    43  => "CROSS",
    44  => "CURRENT_TIMESTAMP",
    45  => "DATABASE",
    46  => "DATABASES",
    47  => "DAY",
    48  => "DAY_HOUR",
    49  => "DAY_MINUTE",
    50  => "DAY_SECOND",
    51  => "DEFAULT",
    52  => "DEFINER",
    53  => "DELAYED",
    54  => "DELETE",
    55  => "DELETE FROM",
    56  => "DESC",
    57  => "DESCRIBE",
    58  => "DETERMINISTIC",
    59  => "DISTINCT",
    60  => "DISTINCTROW",
    61  => "DIV",
    62  => "DO",
    63  => "DROP",
    64  => "DUMPFILE",
    65  => "DUPLICATE",
    66  => "DYNAMIC",
    67  => "ELSE",
    68  => "ENCLOSED",
    69  => "END",
    70  => "ENGINE",
    71  => "ENGINES",
    72  => "ENGINE_TYPE",
    73  => "ESCAPE",
    74  => "ESCAPED",
    75  => "EVENTS",
    76  => "EXCEPT",
    77  => "EXECUTE",
    78  => "EXISTS",
    79  => "EXPLAIN",
    80  => "EXTENDED",
    81  => "FAST",
    82  => "FIELDS",
    83  => "FILE",
    84  => "FIRST",
    85  => "FIXED",
    86  => "FLUSH",
    87  => "FOR",
    88  => "FORCE",
    89  => "FOREIGN",
    90  => "FROM",
    91  => "FULL",
    92  => "FULLTEXT",
    93  => "FUNCTION",
    94  => "GLOBAL",
    95  => "GRANT",
    96  => "GRANTS",
    97  => "GROUP BY",
    98  => "GROUP_CONCAT",
    99  => "HAVING",
    100 => "HEAP",
    101 => "HIGH_PRIORITY",
    102 => "HOSTS",
    103 => "HOUR",
    104 => "HOUR_MINUTE",
    105 => "HOUR_SECOND",
    106 => "IDENTIFIED",
    107 => "IF",
    108 => "IFNULL",
    109 => "IGNORE",
    110 => "IN",
    111 => "INDEX",
    112 => "INDEXES",
    113 => "INFILE",
    114 => "INNER",
    115 => "INSERT",
    116 => "INSERT_ID",
    117 => "INSERT_METHOD",
    118 => "INTERSECT",
    119 => "INTERVAL",
    120 => "INTO",
    121 => "INVOKER",
    122 => "IS",
    123 => "ISOLATION",
    124 => "JOIN",
    125 => "KEY",
    126 => "KEYS",
    127 => "KILL",
    128 => "LAST_INSERT_ID",
    129 => "LEADING",
    130 => "LEFT",
    131 => "LEVEL",
    132 => "LIKE",
    133 => "LIMIT",
    134 => "LINEAR",
    135 => "LINES",
    136 => "LOAD",
    137 => "LOCAL",
    138 => "LOCK",
    139 => "LOCKS",
    140 => "LOGS",
    141 => "LOW_PRIORITY",
    142 => "MARIA",
    143 => "MASTER",
    144 => "MASTER_CONNECT_RETRY",
    145 => "MASTER_HOST",
    146 => "MASTER_LOG_FILE",
    147 => "MATCH",
    148 => "MAX_CONNECTIONS_PER_HOUR",
    149 => "MAX_QUERIES_PER_HOUR",
    150 => "MAX_ROWS",
    151 => "MAX_UPDATES_PER_HOUR",
    152 => "MAX_USER_CONNECTIONS",
    153 => "MEDIUM",
    154 => "MERGE",
    155 => "MINUTE",
    156 => "MINUTE_SECOND",
    157 => "MIN_ROWS",
    158 => "MODE",
    159 => "MODIFY",
    160 => "MONTH",
    161 => "MRG_MYISAM",
    162 => "MYISAM",
    163 => "NAMES",
    164 => "NATURAL",
    165 => "NOT",
    166 => "NOW()",
    167 => "NULL",
    168 => "OFFSET",
    169 => "ON",
    170 => "ON DELETE",
    171 => "ON UPDATE",
    172 => "OPEN",
    173 => "OPTIMIZE",
    174 => "OPTION",
    175 => "OPTIONALLY",
    176 => "OR",
    177 => "ORDER BY",
    178 => "OUTER",
    179 => "OUTFILE",
    180 => "PACK_KEYS",
    181 => "PAGE",
    182 => "PARTIAL",
    183 => "PARTITION",
    184 => "PARTITIONS",
    185 => "PASSWORD",
    186 => "PRIMARY",
    187 => "PRIVILEGES",
    188 => "PROCEDURE",
    189 => "PROCESS",
    190 => "PROCESSLIST",
    191 => "PURGE",
    192 => "QUICK",
    193 => "RAID0",
    194 => "RAID_CHUNKS",
    195 => "RAID_CHUNKSIZE",
    196 => "RAID_TYPE",
    197 => "RANGE",
    198 => "READ",
    199 => "READ_ONLY",
    200 => "READ_WRITE",
    201 => "REFERENCES",
    202 => "REGEXP",
    203 => "RELOAD",
    204 => "RENAME",
    205 => "REPAIR",
    206 => "REPEATABLE",
    207 => "REPLACE",
    208 => "REPLICATION",
    209 => "RESET",
    210 => "RESTORE",
    211 => "RESTRICT",
    212 => "RETURN",
    213 => "RETURNS",
    214 => "REVOKE",
    215 => "RIGHT",
    216 => "RLIKE",
    217 => "ROLLBACK",
    218 => "ROW",
    219 => "ROWS",
    220 => "ROW_FORMAT",
    221 => "SECOND",
    222 => "SECURITY",
    223 => "SELECT",
    224 => "SEPARATOR",
    225 => "SERIALIZABLE",
    226 => "SESSION",
    227 => "SET",
    228 => "SHARE",
    229 => "SHOW",
    230 => "SHUTDOWN",
    231 => "SLAVE",
    232 => "SONAME",
    233 => "SOUNDS",
    234 => "SQL",
    235 => "SQL_AUTO_IS_NULL",
    236 => "SQL_BIG_RESULT",
    237 => "SQL_BIG_SELECTS",
    238 => "SQL_BIG_TABLES",
    239 => "SQL_BUFFER_RESULT",
    240 => "SQL_CACHE",
    241 => "SQL_CALC_FOUND_ROWS",
    242 => "SQL_LOG_BIN",
    243 => "SQL_LOG_OFF",
    244 => "SQL_LOG_UPDATE",
    245 => "SQL_LOW_PRIORITY_UPDATES",
    246 => "SQL_MAX_JOIN_SIZE",
    247 => "SQL_NO_CACHE",
    248 => "SQL_QUOTE_SHOW_CREATE",
    249 => "SQL_SAFE_UPDATES",
    250 => "SQL_SELECT_LIMIT",
    251 => "SQL_SLAVE_SKIP_COUNTER",
    252 => "SQL_SMALL_RESULT",
    253 => "SQL_WARNINGS",
    254 => "START",
    255 => "STARTING",
    256 => "STATUS",
    257 => "STOP",
    258 => "STORAGE",
    259 => "STRAIGHT_JOIN",
    260 => "STRING",
    261 => "STRIPED",
    262 => "SUPER",
    263 => "TABLE",
    264 => "TABLES",
    265 => "TEMPORARY",
    266 => "TERMINATED",
    267 => "THEN",
    268 => "TO",
    269 => "TRAILING",
    270 => "TRANSACTIONAL",
    271 => "TRUE",
    272 => "TRUNCATE",
    273 => "TYPE",
    274 => "TYPES",
    275 => "UNCOMMITTED",
    276 => "UNION",
    277 => "UNION ALL",
    278 => "UNIQUE",
    279 => "UNLOCK",
    280 => "UNSIGNED",
    281 => "UPDATE",
    282 => "USAGE",
    283 => "USE",
    284 => "USING",
    285 => "VALUES",
    286 => "VARIABLES",
    287 => "VIEW",
    288 => "WHEN",
    289 => "WHERE",
    290 => "WITH",
    291 => "WORK",
    292 => "WRITE",
    293 => "XOR",
    294 => "YEAR_MONTH",
    295 => "ABS",
    296 => "ACOS",
    297 => "ADDDATE",
    298 => "ADDTIME",
    299 => "AES_DECRYPT",
    300 => "AES_ENCRYPT",
    301 => "AREA",
    302 => "ASBINARY",
    303 => "ASCII",
    304 => "ASIN",
    305 => "ASTEXT",
    306 => "ATAN",
    307 => "ATAN2",
    308 => "AVG",
    309 => "BDMPOLYFROMTEXT",
    310 => "BDMPOLYFROMWKB",
    311 => "BDPOLYFROMTEXT",
    312 => "BDPOLYFROMWKB",
    313 => "BENCHMARK",
    314 => "BIN",
    315 => "BIT_AND",
    316 => "BIT_COUNT",
    317 => "BIT_LENGTH",
    318 => "BIT_OR",
    319 => "BIT_XOR",
    320 => "BOUNDARY",
    321 => "BUFFER",
    322 => "CAST",
    323 => "CEIL",
    324 => "CEILING",
    325 => "CENTROID",
    326 => "CHAR",
    327 => "CHARACTER_LENGTH",
    328 => "CHARSET",
    329 => "CHAR_LENGTH",
    330 => "COALESCE",
    331 => "COERCIBILITY",
    332 => "COLLATION",
    333 => "COMPRESS",
    334 => "CONCAT",
    335 => "CONCAT_WS",
    336 => "CONNECTION_ID",
    337 => "CONTAINS",
    338 => "CONV",
    339 => "CONVERT",
    340 => "CONVERT_TZ",
    341 => "CONVEXHULL",
    342 => "COS",
    343 => "COT",
    344 => "COUNT",
    345 => "CRC32",
    346 => "CROSSES",
    347 => "CURDATE",
    348 => "CURRENT_DATE",
    349 => "CURRENT_TIME",
    350 => "CURRENT_TIMESTAMP",
    351 => "CURRENT_USER",
    352 => "CURTIME",
    353 => "DATABASE",
    354 => "DATE",
    355 => "DATEDIFF",
    356 => "DATE_ADD",
    357 => "DATE_DIFF",
    358 => "DATE_FORMAT",
    359 => "DATE_SUB",
    360 => "DAY",
    361 => "DAYNAME",
    362 => "DAYOFMONTH",
    363 => "DAYOFWEEK",
    364 => "DAYOFYEAR",
    365 => "DECODE",
    366 => "DEFAULT",
    367 => "DEGREES",
    368 => "DES_DECRYPT",
    369 => "DES_ENCRYPT",
    370 => "DIFFERENCE",
    371 => "DIMENSION",
    372 => "DISJOINT",
    373 => "DISTANCE",
    374 => "ELT",
    375 => "ENCODE",
    376 => "ENCRYPT",
    377 => "ENDPOINT",
    378 => "ENVELOPE",
    379 => "EQUALS",
    380 => "EXP",
    381 => "EXPORT_SET",
    382 => "EXTERIORRING",
    383 => "EXTRACT",
    384 => "EXTRACTVALUE",
    385 => "FIELD",
    386 => "FIND_IN_SET",
    387 => "FLOOR",
    388 => "FORMAT",
    389 => "FOUND_ROWS",
    390 => "FROM_DAYS",
    391 => "FROM_UNIXTIME",
    392 => "GEOMCOLLFROMTEXT",
    393 => "GEOMCOLLFROMWKB",
    394 => "GEOMETRYCOLLECTION",
    395 => "GEOMETRYCOLLECTIONFROMTEXT",
    396 => "GEOMETRYCOLLECTIONFROMWKB",
    397 => "GEOMETRYFROMTEXT",
    398 => "GEOMETRYFROMWKB",
    399 => "GEOMETRYN",
    400 => "GEOMETRYTYPE",
    401 => "GEOMFROMTEXT",
    402 => "GEOMFROMWKB",
    403 => "GET_FORMAT",
    404 => "GET_LOCK",
    405 => "GLENGTH",
    406 => "GREATEST",
    407 => "GROUP_CONCAT",
    408 => "GROUP_UNIQUE_USERS",
    409 => "HEX",
    410 => "HOUR",
    411 => "IF",
    412 => "IFNULL",
    413 => "INET_ATON",
    414 => "INET_NTOA",
    415 => "INSERT",
    416 => "INSTR",
    417 => "INTERIORRINGN",
    418 => "INTERSECTION",
    419 => "INTERSECTS",
    420 => "INTERVAL",
    421 => "ISCLOSED",
    422 => "ISEMPTY",
    423 => "ISNULL",
    424 => "ISRING",
    425 => "ISSIMPLE",
    426 => "IS_FREE_LOCK",
    427 => "IS_USED_LOCK",
    428 => "LAST_DAY",
    429 => "LAST_INSERT_ID",
    430 => "LCASE",
    431 => "LEAST",
    432 => "LEFT",
    433 => "LENGTH",
    434 => "LINEFROMTEXT",
    435 => "LINEFROMWKB",
    436 => "LINESTRING",
    437 => "LINESTRINGFROMTEXT",
    438 => "LINESTRINGFROMWKB",
    439 => "LN",
    440 => "LOAD_FILE",
    441 => "LOCALTIME",
    442 => "LOCALTIMESTAMP",
    443 => "LOCATE",
    444 => "LOG",
    445 => "LOG10",
    446 => "LOG2",
    447 => "LOWER",
    448 => "LPAD",
    449 => "LTRIM",
    450 => "MAKEDATE",
    451 => "MAKETIME",
    452 => "MAKE_SET",
    453 => "MASTER_POS_WAIT",
    454 => "MAX",
    455 => "MBRCONTAINS",
    456 => "MBRDISJOINT",
    457 => "MBREQUAL",
    458 => "MBRINTERSECTS",
    459 => "MBROVERLAPS",
    460 => "MBRTOUCHES",
    461 => "MBRWITHIN",
    462 => "MD5",
    463 => "MICROSECOND",
    464 => "MID",
    465 => "MIN",
    466 => "MINUTE",
    467 => "MLINEFROMTEXT",
    468 => "MLINEFROMWKB",
    469 => "MOD",
    470 => "MONTH",
    471 => "MONTHNAME",
    472 => "MPOINTFROMTEXT",
    473 => "MPOINTFROMWKB",
    474 => "MPOLYFROMTEXT",
    475 => "MPOLYFROMWKB",
    476 => "MULTILINESTRING",
    477 => "MULTILINESTRINGFROMTEXT",
    478 => "MULTILINESTRINGFROMWKB",
    479 => "MULTIPOINT",
    480 => "MULTIPOINTFROMTEXT",
    481 => "MULTIPOINTFROMWKB",
    482 => "MULTIPOLYGON",
    483 => "MULTIPOLYGONFROMTEXT",
    484 => "MULTIPOLYGONFROMWKB",
    485 => "NAME_CONST",
    486 => "NULLIF",
    487 => "NUMGEOMETRIES",
    488 => "NUMINTERIORRINGS",
    489 => "NUMPOINTS",
    490 => "OCT",
    491 => "OCTET_LENGTH",
    492 => "OLD_PASSWORD",
    493 => "ORD",
    494 => "OVERLAPS",
    495 => "PASSWORD",
    496 => "PERIOD_ADD",
    497 => "PERIOD_DIFF",
    498 => "PI",
    499 => "POINT",
    500 => "POINTFROMTEXT",
    501 => "POINTFROMWKB",
    502 => "POINTN",
    503 => "POINTONSURFACE",
    504 => "POLYFROMTEXT",
    505 => "POLYFROMWKB",
    506 => "POLYGON",
    507 => "POLYGONFROMTEXT",
    508 => "POLYGONFROMWKB",
    509 => "POSITION",
    510 => "POW",
    511 => "POWER",
    512 => "QUARTER",
    513 => "QUOTE",
    514 => "RADIANS",
    515 => "RAND",
    516 => "RELATED",
    517 => "RELEASE_LOCK",
    518 => "REPEAT",
    519 => "REPLACE",
    520 => "REVERSE",
    521 => "RIGHT",
    522 => "ROUND",
    523 => "ROW_COUNT",
    524 => "RPAD",
    525 => "RTRIM",
    526 => "SCHEMA",
    527 => "SECOND",
    528 => "SEC_TO_TIME",
    529 => "SESSION_USER",
    530 => "SHA",
    531 => "SHA1",
    532 => "SIGN",
    533 => "SIN",
    534 => "SLEEP",
    535 => "SOUNDEX",
    536 => "SPACE",
    537 => "SQRT",
    538 => "SRID",
    539 => "STARTPOINT",
    540 => "STD",
    541 => "STDDEV",
    542 => "STDDEV_POP",
    543 => "STDDEV_SAMP",
    544 => "STRCMP",
    545 => "STR_TO_DATE",
    546 => "SUBDATE",
    547 => "SUBSTR",
    548 => "SUBSTRING",
    549 => "SUBSTRING_INDEX",
    550 => "SUBTIME",
    551 => "SUM",
    552 => "SYMDIFFERENCE",
    553 => "SYSDATE",
    554 => "SYSTEM_USER",
    555 => "TAN",
    556 => "TIME",
    557 => "TIMEDIFF",
    558 => "TIMESTAMP",
    559 => "TIMESTAMPADD",
    560 => "TIMESTAMPDIFF",
    561 => "TIME_FORMAT",
    562 => "TIME_TO_SEC",
    563 => "TOUCHES",
    564 => "TO_DAYS",
    565 => "TRIM",
    566 => "TRUNCATE",
    567 => "UCASE",
    568 => "UNCOMPRESS",
    569 => "UNCOMPRESSED_LENGTH",
    570 => "UNHEX",
    571 => "UNIQUE_USERS",
    572 => "UNIX_TIMESTAMP",
    573 => "UPDATEXML",
    574 => "UPPER",
    575 => "USER",
    576 => "UTC_DATE",
    577 => "UTC_TIME",
    578 => "UTC_TIMESTAMP",
    579 => "UUID",
    580 => "VARIANCE",
    581 => "VAR_POP",
    582 => "VAR_SAMP",
    583 => "VERSION",
    584 => "WEEK",
    585 => "WEEKDAY",
    586 => "WEEKOFYEAR",
    587 => "WITHIN",
    588 => "X",
    589 => "Y",
    590 => "YEAR",
    591 => "YEARWEEK",
];
/** json_*** 関数で $depth 引数を表す定数 */
const JSON_MAX_DEPTH = -1;
/** parse_php 関数でトークン名変換をするか */
const TOKEN_NAME = 2;

# functions
const arrays = ["ryunosuke\\Functions\\Package\\Arrays", "arrays"];
const arrayize = ["ryunosuke\\Functions\\Package\\Arrays", "arrayize"];
const is_hasharray = ["ryunosuke\\Functions\\Package\\Arrays", "is_hasharray"];
const first_key = ["ryunosuke\\Functions\\Package\\Arrays", "first_key"];
const first_value = ["ryunosuke\\Functions\\Package\\Arrays", "first_value"];
const first_keyvalue = ["ryunosuke\\Functions\\Package\\Arrays", "first_keyvalue"];
const last_key = ["ryunosuke\\Functions\\Package\\Arrays", "last_key"];
const last_value = ["ryunosuke\\Functions\\Package\\Arrays", "last_value"];
const last_keyvalue = ["ryunosuke\\Functions\\Package\\Arrays", "last_keyvalue"];
const prev_key = ["ryunosuke\\Functions\\Package\\Arrays", "prev_key"];
const next_key = ["ryunosuke\\Functions\\Package\\Arrays", "next_key"];
const in_array_and = ["ryunosuke\\Functions\\Package\\Arrays", "in_array_and"];
const in_array_or = ["ryunosuke\\Functions\\Package\\Arrays", "in_array_or"];
const kvsort = ["ryunosuke\\Functions\\Package\\Arrays", "kvsort"];
const array_add = ["ryunosuke\\Functions\\Package\\Arrays", "array_add"];
const array_mix = ["ryunosuke\\Functions\\Package\\Arrays", "array_mix"];
const array_zip = ["ryunosuke\\Functions\\Package\\Arrays", "array_zip"];
const array_cross = ["ryunosuke\\Functions\\Package\\Arrays", "array_cross"];
const array_implode = ["ryunosuke\\Functions\\Package\\Arrays", "array_implode"];
const array_sprintf = ["ryunosuke\\Functions\\Package\\Arrays", "array_sprintf"];
const array_strpad = ["ryunosuke\\Functions\\Package\\Arrays", "array_strpad"];
const array_pos = ["ryunosuke\\Functions\\Package\\Arrays", "array_pos"];
const array_of = ["ryunosuke\\Functions\\Package\\Arrays", "array_of"];
const array_get = ["ryunosuke\\Functions\\Package\\Arrays", "array_get"];
const array_set = ["ryunosuke\\Functions\\Package\\Arrays", "array_set"];
const array_put = ["ryunosuke\\Functions\\Package\\Arrays", "array_put"];
const array_unset = ["ryunosuke\\Functions\\Package\\Arrays", "array_unset"];
const array_dive = ["ryunosuke\\Functions\\Package\\Arrays", "array_dive"];
const array_keys_exist = ["ryunosuke\\Functions\\Package\\Arrays", "array_keys_exist"];
const array_find = ["ryunosuke\\Functions\\Package\\Arrays", "array_find"];
const array_grep_key = ["ryunosuke\\Functions\\Package\\Arrays", "array_grep_key"];
const array_map_key = ["ryunosuke\\Functions\\Package\\Arrays", "array_map_key"];
const array_filter_not = ["ryunosuke\\Functions\\Package\\Arrays", "array_filter_not"];
const array_filter_key = ["ryunosuke\\Functions\\Package\\Arrays", "array_filter_key"];
const array_filter_eval = ["ryunosuke\\Functions\\Package\\Arrays", "array_filter_eval"];
const array_where = ["ryunosuke\\Functions\\Package\\Arrays", "array_where"];
const array_map_filter = ["ryunosuke\\Functions\\Package\\Arrays", "array_map_filter"];
const array_map_method = ["ryunosuke\\Functions\\Package\\Arrays", "array_map_method"];
const array_maps = ["ryunosuke\\Functions\\Package\\Arrays", "array_maps"];
const array_kmap = ["ryunosuke\\Functions\\Package\\Arrays", "array_kmap"];
const array_nmap = ["ryunosuke\\Functions\\Package\\Arrays", "array_nmap"];
const array_lmap = ["ryunosuke\\Functions\\Package\\Arrays", "array_lmap"];
const array_rmap = ["ryunosuke\\Functions\\Package\\Arrays", "array_rmap"];
const array_each = ["ryunosuke\\Functions\\Package\\Arrays", "array_each"];
const array_depth = ["ryunosuke\\Functions\\Package\\Arrays", "array_depth"];
const array_insert = ["ryunosuke\\Functions\\Package\\Arrays", "array_insert"];
const array_assort = ["ryunosuke\\Functions\\Package\\Arrays", "array_assort"];
const array_count = ["ryunosuke\\Functions\\Package\\Arrays", "array_count"];
const array_group = ["ryunosuke\\Functions\\Package\\Arrays", "array_group"];
const array_all = ["ryunosuke\\Functions\\Package\\Arrays", "array_all"];
const array_any = ["ryunosuke\\Functions\\Package\\Arrays", "array_any"];
const array_order = ["ryunosuke\\Functions\\Package\\Arrays", "array_order"];
const array_shuffle = ["ryunosuke\\Functions\\Package\\Arrays", "array_shuffle"];
const array_shrink_key = ["ryunosuke\\Functions\\Package\\Arrays", "array_shrink_key"];
const array_fill_callback = ["ryunosuke\\Functions\\Package\\Arrays", "array_fill_callback"];
const array_pickup = ["ryunosuke\\Functions\\Package\\Arrays", "array_pickup"];
const array_lookup = ["ryunosuke\\Functions\\Package\\Arrays", "array_lookup"];
const array_columns = ["ryunosuke\\Functions\\Package\\Arrays", "array_columns"];
const array_uncolumns = ["ryunosuke\\Functions\\Package\\Arrays", "array_uncolumns"];
const array_convert = ["ryunosuke\\Functions\\Package\\Arrays", "array_convert"];
const array_flatten = ["ryunosuke\\Functions\\Package\\Arrays", "array_flatten"];
const array_nest = ["ryunosuke\\Functions\\Package\\Arrays", "array_nest"];
const array_difference = ["ryunosuke\\Functions\\Package\\Arrays", "array_difference"];
const stdclass = ["ryunosuke\\Functions\\Package\\Classobj", "stdclass"];
const detect_namespace = ["ryunosuke\\Functions\\Package\\Classobj", "detect_namespace"];
const class_loader = ["ryunosuke\\Functions\\Package\\Classobj", "class_loader"];
const class_namespace = ["ryunosuke\\Functions\\Package\\Classobj", "class_namespace"];
const class_shorten = ["ryunosuke\\Functions\\Package\\Classobj", "class_shorten"];
const class_replace = ["ryunosuke\\Functions\\Package\\Classobj", "class_replace"];
const object_dive = ["ryunosuke\\Functions\\Package\\Classobj", "object_dive"];
const get_object_properties = ["ryunosuke\\Functions\\Package\\Classobj", "get_object_properties"];
const file_list = ["ryunosuke\\Functions\\Package\\FileSystem", "file_list"];
const file_tree = ["ryunosuke\\Functions\\Package\\FileSystem", "file_tree"];
const file_extension = ["ryunosuke\\Functions\\Package\\FileSystem", "file_extension"];
const file_set_contents = ["ryunosuke\\Functions\\Package\\FileSystem", "file_set_contents"];
const file_rewrite_contents = ["ryunosuke\\Functions\\Package\\FileSystem", "file_rewrite_contents"];
const mkdir_p = ["ryunosuke\\Functions\\Package\\FileSystem", "mkdir_p"];
const dirname_r = ["ryunosuke\\Functions\\Package\\FileSystem", "dirname_r"];
const fnmatch_and = ["ryunosuke\\Functions\\Package\\FileSystem", "fnmatch_and"];
const fnmatch_or = ["ryunosuke\\Functions\\Package\\FileSystem", "fnmatch_or"];
const path_is_absolute = ["ryunosuke\\Functions\\Package\\FileSystem", "path_is_absolute"];
const path_resolve = ["ryunosuke\\Functions\\Package\\FileSystem", "path_resolve"];
const path_normalize = ["ryunosuke\\Functions\\Package\\FileSystem", "path_normalize"];
const cp_rf = ["ryunosuke\\Functions\\Package\\FileSystem", "cp_rf"];
const rm_rf = ["ryunosuke\\Functions\\Package\\FileSystem", "rm_rf"];
const tmpname = ["ryunosuke\\Functions\\Package\\FileSystem", "tmpname"];
const delegate = ["ryunosuke\\Functions\\Package\\Funchand", "delegate"];
const nbind = ["ryunosuke\\Functions\\Package\\Funchand", "nbind"];
const lbind = ["ryunosuke\\Functions\\Package\\Funchand", "lbind"];
const rbind = ["ryunosuke\\Functions\\Package\\Funchand", "rbind"];
const composite = ["ryunosuke\\Functions\\Package\\Funchand", "composite"];
const return_arg = ["ryunosuke\\Functions\\Package\\Funchand", "return_arg"];
const ope_func = ["ryunosuke\\Functions\\Package\\Funchand", "ope_func"];
const not_func = ["ryunosuke\\Functions\\Package\\Funchand", "not_func"];
const eval_func = ["ryunosuke\\Functions\\Package\\Funchand", "eval_func"];
const reflect_callable = ["ryunosuke\\Functions\\Package\\Funchand", "reflect_callable"];
const closurize = ["ryunosuke\\Functions\\Package\\Funchand", "closurize"];
const callable_code = ["ryunosuke\\Functions\\Package\\Funchand", "callable_code"];
const call_safely = ["ryunosuke\\Functions\\Package\\Funchand", "call_safely"];
const ob_capture = ["ryunosuke\\Functions\\Package\\Funchand", "ob_capture"];
const is_bindable_closure = ["ryunosuke\\Functions\\Package\\Funchand", "is_bindable_closure"];
const by_builtin = ["ryunosuke\\Functions\\Package\\Funchand", "by_builtin"];
const namedcallize = ["ryunosuke\\Functions\\Package\\Funchand", "namedcallize"];
const parameter_length = ["ryunosuke\\Functions\\Package\\Funchand", "parameter_length"];
const function_shorten = ["ryunosuke\\Functions\\Package\\Funchand", "function_shorten"];
const func_user_func_array = ["ryunosuke\\Functions\\Package\\Funchand", "func_user_func_array"];
const func_method = ["ryunosuke\\Functions\\Package\\Funchand", "func_method"];
const function_alias = ["ryunosuke\\Functions\\Package\\Funchand", "function_alias"];
const minimum = ["ryunosuke\\Functions\\Package\\Math", "minimum"];
const maximum = ["ryunosuke\\Functions\\Package\\Math", "maximum"];
const mode = ["ryunosuke\\Functions\\Package\\Math", "mode"];
const mean = ["ryunosuke\\Functions\\Package\\Math", "mean"];
const median = ["ryunosuke\\Functions\\Package\\Math", "median"];
const average = ["ryunosuke\\Functions\\Package\\Math", "average"];
const sum = ["ryunosuke\\Functions\\Package\\Math", "sum"];
const random_at = ["ryunosuke\\Functions\\Package\\Math", "random_at"];
const probability = ["ryunosuke\\Functions\\Package\\Math", "probability"];
const getipaddress = ["ryunosuke\\Functions\\Package\\Network", "getipaddress"];
const incidr = ["ryunosuke\\Functions\\Package\\Network", "incidr"];
const http_requests = ["ryunosuke\\Functions\\Package\\Network", "http_requests"];
const sql_quote = ["ryunosuke\\Functions\\Package\\Sql", "sql_quote"];
const sql_bind = ["ryunosuke\\Functions\\Package\\Sql", "sql_bind"];
const sql_format = ["ryunosuke\\Functions\\Package\\Sql", "sql_format"];
const strcat = ["ryunosuke\\Functions\\Package\\Strings", "strcat"];
const concat = ["ryunosuke\\Functions\\Package\\Strings", "concat"];
const split_noempty = ["ryunosuke\\Functions\\Package\\Strings", "split_noempty"];
const multiexplode = ["ryunosuke\\Functions\\Package\\Strings", "multiexplode"];
const quoteexplode = ["ryunosuke\\Functions\\Package\\Strings", "quoteexplode"];
const str_equals = ["ryunosuke\\Functions\\Package\\Strings", "str_equals"];
const str_contains = ["ryunosuke\\Functions\\Package\\Strings", "str_contains"];
const str_chop = ["ryunosuke\\Functions\\Package\\Strings", "str_chop"];
const str_lchop = ["ryunosuke\\Functions\\Package\\Strings", "str_lchop"];
const str_rchop = ["ryunosuke\\Functions\\Package\\Strings", "str_rchop"];
const str_putcsv = ["ryunosuke\\Functions\\Package\\Strings", "str_putcsv"];
const str_subreplace = ["ryunosuke\\Functions\\Package\\Strings", "str_subreplace"];
const str_between = ["ryunosuke\\Functions\\Package\\Strings", "str_between"];
const starts_with = ["ryunosuke\\Functions\\Package\\Strings", "starts_with"];
const ends_with = ["ryunosuke\\Functions\\Package\\Strings", "ends_with"];
const camel_case = ["ryunosuke\\Functions\\Package\\Strings", "camel_case"];
const pascal_case = ["ryunosuke\\Functions\\Package\\Strings", "pascal_case"];
const snake_case = ["ryunosuke\\Functions\\Package\\Strings", "snake_case"];
const chain_case = ["ryunosuke\\Functions\\Package\\Strings", "chain_case"];
const htmltag = ["ryunosuke\\Functions\\Package\\Strings", "htmltag"];
const build_uri = ["ryunosuke\\Functions\\Package\\Strings", "build_uri"];
const parse_uri = ["ryunosuke\\Functions\\Package\\Strings", "parse_uri"];
const ini_export = ["ryunosuke\\Functions\\Package\\Strings", "ini_export"];
const ini_import = ["ryunosuke\\Functions\\Package\\Strings", "ini_import"];
const csv_export = ["ryunosuke\\Functions\\Package\\Strings", "csv_export"];
const csv_import = ["ryunosuke\\Functions\\Package\\Strings", "csv_import"];
const json_export = ["ryunosuke\\Functions\\Package\\Strings", "json_export"];
const json_import = ["ryunosuke\\Functions\\Package\\Strings", "json_import"];
const markdown_table = ["ryunosuke\\Functions\\Package\\Strings", "markdown_table"];
const random_string = ["ryunosuke\\Functions\\Package\\Strings", "random_string"];
const kvsprintf = ["ryunosuke\\Functions\\Package\\Strings", "kvsprintf"];
const preg_capture = ["ryunosuke\\Functions\\Package\\Strings", "preg_capture"];
const preg_splice = ["ryunosuke\\Functions\\Package\\Strings", "preg_splice"];
const preg_replaces = ["ryunosuke\\Functions\\Package\\Strings", "preg_replaces"];
const damerau_levenshtein = ["ryunosuke\\Functions\\Package\\Strings", "damerau_levenshtein"];
const str_guess = ["ryunosuke\\Functions\\Package\\Strings", "str_guess"];
const render_string = ["ryunosuke\\Functions\\Package\\Strings", "render_string"];
const render_file = ["ryunosuke\\Functions\\Package\\Strings", "render_file"];
const parse_php = ["ryunosuke\\Functions\\Package\\Syntax", "parse_php"];
const returns = ["ryunosuke\\Functions\\Package\\Syntax", "returns"];
const optional = ["ryunosuke\\Functions\\Package\\Syntax", "optional"];
const chain = ["ryunosuke\\Functions\\Package\\Syntax", "chain"];
const throws = ["ryunosuke\\Functions\\Package\\Syntax", "throws"];
const throw_if = ["ryunosuke\\Functions\\Package\\Syntax", "throw_if"];
const ifelse = ["ryunosuke\\Functions\\Package\\Syntax", "ifelse"];
const try_catch = ["ryunosuke\\Functions\\Package\\Syntax", "try_catch"];
const try_finally = ["ryunosuke\\Functions\\Package\\Syntax", "try_finally"];
const try_catch_finally = ["ryunosuke\\Functions\\Package\\Syntax", "try_catch_finally"];
const get_uploaded_files = ["ryunosuke\\Functions\\Package\\Utility", "get_uploaded_files"];
const cache = ["ryunosuke\\Functions\\Package\\Utility", "cache"];
const process = ["ryunosuke\\Functions\\Package\\Utility", "process"];
const arguments = ["ryunosuke\\Functions\\Package\\Utility", "arguments"];
const stacktrace = ["ryunosuke\\Functions\\Package\\Utility", "stacktrace"];
const backtrace = ["ryunosuke\\Functions\\Package\\Utility", "backtrace"];
const error = ["ryunosuke\\Functions\\Package\\Utility", "error"];
const timer = ["ryunosuke\\Functions\\Package\\Utility", "timer"];
const benchmark = ["ryunosuke\\Functions\\Package\\Utility", "benchmark"];
const stringify = ["ryunosuke\\Functions\\Package\\Vars", "stringify"];
const numberify = ["ryunosuke\\Functions\\Package\\Vars", "numberify"];
const numval = ["ryunosuke\\Functions\\Package\\Vars", "numval"];
const arrayval = ["ryunosuke\\Functions\\Package\\Vars", "arrayval"];
const si_prefix = ["ryunosuke\\Functions\\Package\\Vars", "si_prefix"];
const si_unprefix = ["ryunosuke\\Functions\\Package\\Vars", "si_unprefix"];
const is_empty = ["ryunosuke\\Functions\\Package\\Vars", "is_empty"];
const is_primitive = ["ryunosuke\\Functions\\Package\\Vars", "is_primitive"];
const is_recursive = ["ryunosuke\\Functions\\Package\\Vars", "is_recursive"];
const is_stringable = ["ryunosuke\\Functions\\Package\\Vars", "is_stringable"];
const is_arrayable = ["ryunosuke\\Functions\\Package\\Vars", "is_arrayable"];
const is_iterable = ["ryunosuke\\Functions\\Package\\Vars", "is_iterable"];
const is_countable = ["ryunosuke\\Functions\\Package\\Vars", "is_countable"];
const varcmp = ["ryunosuke\\Functions\\Package\\Vars", "varcmp"];
const var_type = ["ryunosuke\\Functions\\Package\\Vars", "var_type"];
const var_apply = ["ryunosuke\\Functions\\Package\\Vars", "var_apply"];
const var_applys = ["ryunosuke\\Functions\\Package\\Vars", "var_applys"];
const var_export2 = ["ryunosuke\\Functions\\Package\\Vars", "var_export2"];
const var_html = ["ryunosuke\\Functions\\Package\\Vars", "var_html"];
const console_log = ["ryunosuke\\Functions\\Package\\Vars", "console_log"];
const hashvar = ["ryunosuke\\Functions\\Package\\Vars", "hashvar"];